// Package docs Code generated by swaggo/swag. DO NOT EDIT
package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/token/generateToken": {
            "get": {
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Tokens"
                ],
                "summary": "Получение токена и uuid",
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/log-in-with-credentials": {
            "post": {
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Аутентификация пользователя по логину и паролю",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserLogin"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "successful response",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    },
                    "400": {
                        "description": "bad request",
                        "schema": {
                            "type": "object",
                            "additionalProperties": true
                        }
                    }
                }
            }
        },
        "/user/registration": {
            "post": {
                "description": "Регистрирует пользователя, сохраняя зашифрованные данные и ключ в базу данных.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "tags": [
                    "Users"
                ],
                "summary": "Регистрация нового пользователя",
                "parameters": [
                    {
                        "description": "Данные пользователя",
                        "name": "data",
                        "in": "body",
                        "required": true,
                        "schema": {
                            "$ref": "#/definitions/users.UserRegistration"
                        }
                    }
                ],
                "responses": {
                    "200": {
                        "description": "User registered successfully",
                        "schema": {
                            "$ref": "#/definitions/users.ResponseMessage"
                        }
                    },
                    "400": {
                        "description": "Invalid request data",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    },
                    "500": {
                        "description": "Failed to connect to database",
                        "schema": {
                            "$ref": "#/definitions/users.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "users.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "users.ResponseMessage": {
            "type": "object",
            "properties": {
                "Data": {
                    "type": "object",
                    "additionalProperties": true
                },
                "message": {
                    "type": "string"
                },
                "status": {
                    "type": "boolean"
                }
            }
        },
        "users.UserLogin": {
            "description": "User login data structure.",
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "john_doe"
                },
                "pKey": {
                    "type": "string"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "uuid": {
                    "type": "string"
                }
            }
        },
        "users.UserRegistration": {
            "description": "User registration data structure.",
            "type": "object",
            "properties": {
                "login": {
                    "type": "string",
                    "example": "john_doe"
                },
                "name": {
                    "type": "string",
                    "example": "John"
                },
                "nik": {
                    "type": "string",
                    "example": "JohnnyD"
                },
                "password": {
                    "type": "string",
                    "example": "securePassword123"
                },
                "soName": {
                    "type": "string",
                    "example": "Doe"
                },
                "uuid": {
                    "type": "string"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
